<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace=绑定一个对应的Dao/Mapper接口-->
<mapper namespace="com.chy.mapper.EmployeeMapper">

    <!--int deleteById(Integer id);-->
    <delete id="deleteById">
        delete from t_emp where emp_id = #{id}
    </delete>

    <!--
        场景1：返回单个简单类型如何指定，resultType的写法！ 返回值的数据类型！！
            resultType语法：
                类的全限定符号
                别名简称
                    mybatis给我们提供了72种默认的别名！
                    这些都是我们常用的java数据类型！
                        基本数据类型 int double -> _int _double
                        包装数据类型 Integer Double -> int integer double
                        集合容器类型 Map List HashMap -> 小写即可 map list hashmap

                扩展：如果没有提供的需要我们自己定义或者写类的全限定符号
                    给自己声明的类定义别名：
                            单独设置
                                <typeAliases>
                                    <typeAlias type="com.chy.pojo.Employee" alias="ergouzi"></typeAlias>
                                </typeAliases>
                            批量设置
                                <typeAliases>
                                    <package name="com.chy.pojo"/>
                                </typeAliases>
                            扩展：如果不想使用批量的别名，可以使用注解给与别名
                            @Alias()
    -->
    <!--String queryNameById(Integer id);-->
    <select id="queryNameById" resultType="java.lang.String">
        select emp_name from t_emp where emp_id = #{id}
    </select>

    <!--String querySalaryById(Integer id);-->
    <select id="querySalaryById" resultType="java.lang.Double">
        select emp_salary from t_emp where emp_id = #{id}
    </select>

    <!--
        场景2：返回单个自定义类型
            resultType：返回值类型即可

            默认要求：
                查询：返回单个实体类型，要求列名和属性名要一致
                这样才可以进行实体类的属性映射！

            但是可以进行设置，设置支持驼峰式自动映射！
                emp_id -> empId
    -->
    <!--Employee queryById(Integer id);-->
    <select id="queryById" resultType="employee">
        select * from t_emp where emp_id = ${id}
    </select>

    <!--
        场景3：返回map
            当没有实体类或者对应属性实体类的时候！
            我们可以使用map接收数据！
            key -> 查询的列
            value -> 查询的值
    -->
    <!--Map<String,Object> selectEmpNameAndMaxSalary();-->
    <select id="selectEmpNameAndMaxSalary" resultType="map">
        SELECT
        emp_name 员工姓名,
        emp_salary 员工工资,
        (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资
        FROM t_emp WHERE emp_salary=(
        SELECT MAX(emp_salary) FROM t_emp
        )
    </select>

    <!--
        场景4：返回的是集合类型如何指定
            切记：返回值是集合，resultType不需要指定集合类型，只需要指定泛型即可
            为什么？
                mybatis -> ibatis -> selectOne 单个 | selectList 集合 -> selectOne 调用 【selectList】
    -->
    <!--List<Employee> queryNamesBySalary(Double salary);-->
    <select id="queryNamesBySalary" resultType="string">
        select emp_name from t_emp where emp_salary > #{salary}
    </select>
    <!--List<Employee> queryAll();-->
    <select id="queryAll" resultType="employee">
        select * from t_emp
    </select>

    <!--
        场景5：主键回显 获取插入数据的主键
            1、自增长主键回显 mysql auto_increment
            useGeneratedKeys = "true" 我们想要数据库自动增长的主键值
            keyColumn="emp_id"：主键列的值！
            keyProperty="empId"：接收主键列值的属性！
    -->
    <!--int insertEmp(Employee employee);-->
    <insert id="insertEmp" useGeneratedKeys="true" keyColumn="emp_id" keyProperty="empId">
        insert into t_emp (emp_name,emp_salary)
            values(#{empName},#{empSalary})
    </insert>

</mapper>